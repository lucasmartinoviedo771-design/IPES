# Generated by Django 5.2.5 on 2025-08-15 09:06

from django.db import migrations, models


# ---------- helpers de SQL condicional ----------

def safe_drop_uniq_espacio_idx(apps, schema_editor):
    """
    MySQL: intenta DROP INDEX uniq_espacio_por_plan_y_anio_cuatri_nombre
    solo si existe. Evita error 1091.
    """
    index_name = "uniq_espacio_por_plan_y_anio_cuatri_nombre"
    table_name = "academia_core_espaciocurricular"
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "SHOW INDEX FROM `{}` WHERE Key_name=%s".format(table_name),
            [index_name],
        )
        if cursor.fetchone():
            cursor.execute(
                "ALTER TABLE `{}` DROP INDEX `{}`".format(table_name, index_name)
            )


def column_exists(schema_editor, table_name: str, column_name: str) -> bool:
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            """
            SELECT 1
            FROM information_schema.COLUMNS
            WHERE TABLE_SCHEMA = DATABASE()
              AND TABLE_NAME = %s
              AND COLUMN_NAME = %s
            LIMIT 1
            """,
            [table_name, column_name],
        )
        return cursor.fetchone() is not None


def safe_add_boolean_column(table_name: str, column_name: str):
    def _inner(apps, schema_editor):
        if not column_exists(schema_editor, table_name, column_name):
            with schema_editor.connection.cursor() as cursor:
                cursor.execute(
                    "ALTER TABLE `{}` "
                    "ADD COLUMN `{}` TINYINT(1) NOT NULL DEFAULT 0".format(
                        table_name, column_name
                    )
                )
    return _inner


def index_exists(schema_editor, table_name: str, index_name: str) -> bool:
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            """
            SELECT 1
            FROM information_schema.STATISTICS
            WHERE TABLE_SCHEMA = DATABASE()
              AND TABLE_NAME = %s
              AND INDEX_NAME = %s
            LIMIT 1
            """,
            [table_name, index_name],
        )
        return cursor.fetchone() is not None


def safe_create_index_espacios(apps, schema_editor):
    """
    Crea índice no-único en academia_core_espaciocurricular(profesorado_id, plan_id, nombre)
    solo si no existe.
    """
    table = "academia_core_espaciocurricular"
    index_name = "academia_co_profeso_0214a3_idx"
    if not index_exists(schema_editor, table, index_name):
        with schema_editor.connection.cursor() as cursor:
            cursor.execute(
                "CREATE INDEX `{}` ON `{}` (`profesorado_id`,`plan_id`,`nombre`)".format(
                    index_name, table
                )
            )


def safe_create_index_insc(apps, schema_editor):
    """
    Crea índice no-único en academia_core_inscripcionespacio(inscripcion_id, anio_academico)
    solo si no existe.
    """
    table = "academia_core_inscripcionespacio"
    index_name = "idx_cursada_insc_anio"
    if not index_exists(schema_editor, table, index_name):
        with schema_editor.connection.cursor() as cursor:
            cursor.execute(
                "CREATE INDEX `{}` ON `{}` (`inscripcion_id`,`anio_academico`)".format(
                    index_name, table
                )
            )


class Migration(migrations.Migration):

    dependencies = [
        ('academia_core', '0017_remove_espaciocurricular_uniq_espacio_por_plan_y_anio_cuatri_nombre_and_more'),
    ]

    operations = [
        # 1) DROP INDEX condicional (evita 1091)
        migrations.RunPython(
            code=safe_drop_uniq_espacio_idx,
            reverse_code=migrations.RunPython.noop,
        ),

        # 2) Actualiza el estado de Django quitando ese constraint del ProjectState
        migrations.RunSQL(
            sql=migrations.RunSQL.noop,
            reverse_sql=migrations.RunSQL.noop,
            state_operations=[
                migrations.RemoveConstraint(
                    model_name='espaciocurricular',
                    name='uniq_espacio_por_plan_y_anio_cuatri_nombre',
                ),
            ],
        ),

        # 3) ADD COLUMN condicionales (evita 1060)
        migrations.RunPython(
            code=safe_add_boolean_column("academia_core_movimiento", "ausencia_justificada"),
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunSQL(
            sql=migrations.RunSQL.noop,
            reverse_sql=migrations.RunSQL.noop,
            state_operations=[
                migrations.AddField(
                    model_name='movimiento',
                    name='ausencia_justificada',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),

        migrations.RunPython(
            code=safe_add_boolean_column("academia_core_movimiento", "ausente"),
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunSQL(
            sql=migrations.RunSQL.noop,
            reverse_sql=migrations.RunSQL.noop,
            state_operations=[
                migrations.AddField(
                    model_name='movimiento',
                    name='ausente',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),

        # 4) Índices condicionales (evita 1061) + estado de Django
        migrations.RunPython(
            code=safe_create_index_espacios,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunSQL(
            sql=migrations.RunSQL.noop,
            reverse_sql=migrations.RunSQL.noop,
            state_operations=[
                migrations.AddIndex(
                    model_name='espaciocurricular',
                    index=models.Index(
                        fields=['profesorado', 'plan', 'nombre'],
                        name='academia_co_profeso_0214a3_idx',
                    ),
                ),
            ],
        ),

        migrations.RunPython(
            code=safe_create_index_insc,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunSQL(
            sql=migrations.RunSQL.noop,
            reverse_sql=migrations.RunSQL.noop,
            state_operations=[
                migrations.AddIndex(
                    model_name='inscripcionespacio',
                    index=models.Index(
                        fields=['inscripcion', 'anio_academico'],
                        name='idx_cursada_insc_anio',
                    ),
                ),
            ],
        ),
    ]
