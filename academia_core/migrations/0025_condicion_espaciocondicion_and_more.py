# Generated by Django 5.2.5 on 2025-08-17 09:34

import django.db.models.deletion
from django.db import migrations, models


def seed_condiciones_y_normalizar_movimientos(apps, schema_editor):
    Condicion = apps.get_model('academia_core', 'Condicion')
    Movimiento = apps.get_model('academia_core', 'Movimiento')
    db = schema_editor.connection.alias

    # 1) Sembrar catálogo de condiciones (código = PK de Condicion)
    semillas = [
        # tipo REG (cursada)
        ("REGULAR",        "Regular",        "REG", 10),
        ("PROMOCION",      "Promoción",      "REG", 20),
        ("LIBRE",          "Libre",          "REG", 30),
        ("DESAPROBADO_TP", "Desaprobado TP", "REG", 40),
        ("DESAPROBADO_PA", "Desaprobado PA", "REG", 50),
        ("LIBRE-I",        "Libre-I",        "REG", 60),
        ("LIBRE-AT",       "Libre-AT",       "REG", 70),

        # tipo FIN (finales)
        ("APROBADO",       "Aprobado",       "FIN", 80),
        ("DESAPROBADO",    "Desaprobado",    "FIN", 90),
        ("AUSENTE",        "Ausente",        "FIN", 100),
        ("EQUIVALENCIA",   "Equivalencia",   "FIN", 110),
    ]
    for codigo, nombre, tipo, orden in semillas:
        Condicion.objects.using(db).get_or_create(
            codigo=codigo,
            defaults={"nombre": nombre, "tipo": tipo, "orden": orden},
        )

    # 2) Normalizar valores existentes en Movimiento.condicion
    #    (antes de convertirlo a FK)
    mapping = {
        "REG": "REGULAR",
        "Regular": "REGULAR",
        "REGULAR": "REGULAR",
        "Promocion": "PROMOCION",
        "PROMOCION": "PROMOCION",
        "PROMOCIÓN": "PROMOCION",
        "LIBRE": "LIBRE",
        "LIBRE-I": "LIBRE-I",
        "LIBRE-AT": "LIBRE-AT",
        "DESAPROBADO TP": "DESAPROBADO_TP",
        "DESAPROBADO-TP": "DESAPROBADO_TP",
        "DESAPROBADO_TP": "DESAPROBADO_TP",
        "DESAPROBADO PA": "DESAPROBADO_PA",
        "DESAPROBADO-PA": "DESAPROBADO_PA",
        "DESAPROBADO_PA": "DESAPROBADO_PA",
        "APROBADO": "APROBADO",
        "DESAPROBADO": "DESAPROBADO",
        "AUSENTE": "AUSENTE",
        "EQUIVALENCIA": "EQUIVALENCIA",
    }

    for viejo, nuevo in mapping.items():
        Movimiento.objects.using(db).filter(condicion=viejo).update(condicion=nuevo)

    # Cualquier valor raro que quede: poner a NULL para no violar FK
    Movimiento.objects.using(db).exclude(condicion__in=list(mapping.values())).update(condicion=None)


def noop_reverse(apps, schema_editor):
    # no hacemos nada al revertir
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('academia_core', '0024_normaliza_choices'),
    ]

    operations = [
        migrations.CreateModel(
            name='Condicion',
            fields=[
                ('codigo', models.CharField(help_text="Código único, ej: 'REGULAR', 'PROMOCION'", max_length=50, primary_key=True, serialize=False)),
                ('nombre', models.CharField(help_text="Nombre para mostrar, ej: 'Regular', 'Promoción'", max_length=100)),
                ('tipo', models.CharField(choices=[('REG', 'Cursada'), ('FIN', 'Final')], max_length=3)),
                ('orden', models.PositiveIntegerField(default=0)), # Campo añadido para que el seeder funcione
            ],
            options={
                'verbose_name': 'Condición Académica',
                'verbose_name_plural': 'Condiciones Académicas',
            },
        ),
        migrations.CreateModel(
            name='EspacioCondicion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Condición por Espacio',
                'verbose_name_plural': 'Condiciones por Espacio',
            },
        ),
        migrations.RemoveConstraint(
            model_name='movimiento',
            name='fin_regular_nota_minima',
        ),
        migrations.RemoveConstraint(
            model_name='movimiento',
            name='equivalencia_campos_oblig',
        ),
        migrations.AddField(
            model_name='estudiante',
            name='contacto_emergencia_parentesco',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Parentesco (emergencia)'),
        ),
        migrations.AddField(
            model_name='estudiante',
            name='contacto_emergencia_tel',
            field=models.CharField(blank=True, max_length=30, null=True, verbose_name='Tel. de emergencia'),
        ),
        migrations.AlterField(
            model_name='inscripcionespacio',
            name='estado',
            field=models.CharField(choices=[('EN_CURSO', 'En curso'), ('BAJA', 'Baja')], default='EN_CURSO', max_length=10),
        ),
        
        # --- Ejecutamos la migración de datos ANTES de alterar el campo a ForeignKey ---
        migrations.RunPython(seed_condiciones_y_normalizar_movimientos, reverse_code=noop_reverse),

        migrations.AlterField(
            model_name='movimiento',
            name='condicion',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='movimientos', to='academia_core.condicion', verbose_name='Condición'),
        ),
        migrations.AddField(
            model_name='espaciocondicion',
            name='condicion',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academia_core.condicion'),
        ),
        migrations.AddField(
            model_name='espaciocondicion',
            name='espacio',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academia_core.espaciocurricular'),
        ),
        migrations.AlterUniqueTogether(
            name='espaciocondicion',
            unique_together={('espacio', 'condicion')},
        ),
    ]