# Generated by Django 5.2.5 on 2025-08-14 03:36

from django.db import migrations, models


def _noop(apps, schema_editor):
    # No hacemos nada: en algunas bases de datos esa restricción podría no existir.
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('academia_core', '0016_normaliza_anio'),
    ]

    operations = [
        # Se reemplaza RemoveConstraint por una operación vacía para evitar errores
        # si la restricción 'uniq_espacio_por_plan_y_anio_cuatri_nombre' no existe.
        migrations.RunPython(_noop, reverse_code=_noop),
        
        # Se comenta la creación del índice duplicado.
        # Es seguro porque el índice ya existe en la base de datos.
        # migrations.AddIndex(
        #     model_name='espaciocurricular',
        #     index=models.Index(fields=['profesorado', 'plan', 'nombre'], name='academia_co_profeso_0214a3_idx'),
        # ),
        
        migrations.AddConstraint(
            model_name='espaciocurricular',
            constraint=models.UniqueConstraint(fields=('profesorado', 'plan', 'nombre'), name='uq_espacio_prof_plan_nombre'),
        ),
        migrations.AddConstraint(
            model_name='espaciocurricular',
            constraint=models.CheckConstraint(condition=models.Q(('anio__in', ['1°', '2°', '3°', '4°'])), name='anio_valido_1a4'),
        ),
        migrations.AddConstraint(
            model_name='movimiento',
            constraint=models.CheckConstraint(condition=models.Q(('nota_num__isnull', True), models.Q(('nota_num__gte', 0), ('nota_num__lte', 10)), _connector='OR'), name='nota_num_rango_valido'),
        ),
        migrations.AddConstraint(
            model_name='movimiento',
            constraint=models.CheckConstraint(condition=models.Q(('tipo', 'FIN'), ('condicion', 'Regular'), ('nota_num__lt', 6), _negated=True), name='fin_regular_nota_minima'),
        ),
        migrations.AddConstraint(
            model_name='movimiento',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('condicion', 'Equivalencia'), _negated=True), models.Q(('disposicion_interna__gt', ''), ('nota_texto__iexact', 'Equivalencia')), _connector='OR'), name='equivalencia_campos_oblig'),
        ),
    ]